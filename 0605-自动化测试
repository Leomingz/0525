1.什么是自动化
	没有人或者人比较少参与下，按照人的要求进行自动监控、信息处理、分析判断、操纵控制实现预期的目标
2.什么是自动化测试
	包含单元测试，接口测试，ui测试，主要是编写代码，脚本让软件自行发现缺陷，代替部分手工测试
3.自动化测试发展趋势
	测试在更多浏览器上进行，越来越多人使用最新版本软件
	真实设备和模拟器混合成为移动端测试标准
	自动化测试价值明显
	敏捷开发和DevOps(docker)使用比较多，bug修复速度没有加快
		敏捷开发
			强调程序员和业务之间的协作、面对面
			比书面文档更有效、频繁交付的版本
			更好的使用需求变化的代码编写
4.自动化测试的优缺点
	1>自动化测试优点
		回归测试更方便(程序修改频繁，效果明显)
		运行更繁琐的测试(较少时间运行较多测试)
		执行一些手动测试困难或者不能进行的测试(大量用户，不可能很多测试人员，可以通过自动化模拟多个用户)
		更好的利用资源
		测试具有一致性和重复性(脚本重用)
	2>自动化测试的缺点
		不能替代手工测试
		手动测试比自动化测试发现缺陷更多，自动化测试不容易发现新bug
		对功能测试质量以来比较大，自动化测试脚本正常运转前先要经过功能测试
		自动化测试不能提高有效性
		自动化测试可能会制约软件
		自动化测试和手动测试结合在一起
5.主流测试框架
	QTP、UFT
	selenim
	robot framework
6.selenium特点
	开源、免费
	多浏览器支持 firefox chrome ie opera safari
	多平台支持   linux  windows  mac
	多语言支持   java python ruby php c# js
	对web页面有良好支持
	简单API，灵活(开发语言驱动)
	支持分布式测试用例执行
7.selenium常见的元素定位方法
	a.查看页面元素
		浏览器中F12功能(开发工具)
		点击元素，右键-检查-查看前端代码
	b.对元素的常见操作
		click()   点击
		clear()   清空
		send_keys() 发送(输入)内容
	c.id定位
	d.name定位
	e.class定位
	f.tag定位
	g.link定位
	h.partial_link定位
	i.xpath定位
	j.css定位
8.css定位
	a.单一属性定位
		1>标签选择器
			$("input")
		2>id选择器
			$("#kw")
		3>class选择器
			$(".s_ipt")
		4>其他属性定位
			$("[name='wd']")
		注意:
		通过浏览器的F12的console进行元素定位
	b.组合属性定位
		1>id组合属性定位
			find_element_by_css_selector('input#kw')
		2>class组合属性定位
			find_element_by_css_selector('input.s_ipt')
		3>其他属性组合
			find_element_by_css_selector('input[name="wd"]')
		4>只有属性名，没有值
			find_element_by_css_selector("input[autocomplete]")
		5>两个其他属性定位
			find_element_by_css_selector("[name='wd'][autocomplete='off']")
		6>模糊匹配
			匹配属性值以字符串开头的方法
			find_element_by_css_selector("input[class^='bg']")
			匹配属性值以字符串结尾的方法
			find_element_by_css_selector("input[class$='t']")
	c.层级定位
		$("#form>span>input")
		id是form的子代span标签的子代input标签
9.xpath
	针对xml的路径语言，通过元素的路径来找到这个元素
	a.工具
		F12
		火狐Firbug
	b.用法
		/   绝对路径，从根节点选取元素
		//  相对路径，所有子节点中搜索对应元素
		@   选取属性
		.   当前节点
		..  当前节点的父节点
		注意:通过浏览器的F12的console进行调试$x
		1>xpath支持id，class，name定位
			通过id定位
				$x("//*[@id='kw']")
			通过name定位
				$x("//*[@name='wd']")
			通过class定位
				$x("//input[@class='s_ipt']")
			其他属性定位
				$x("//*[@autocomplete='off']")
		2>通过层级关系定位元素
			通过绝对路径定位元素
				$x("/html/body/div[1]/div[1]")
			通过相对路径定位元素
				$x("//a[@class='lb']")
				$x("//a[@class='mnav c-font-normal c-color-t'][2]")
		3>xpath的运算符
			and   同时满足条件
			or    满足一个条件即可
			$x("//a[@class='mnav c-font-normal c-color-t' and @href='http://map.baidu.com']")
