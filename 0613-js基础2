1.复合数据类型
	a.常用内置对象
	b.日期对象

2.全局对象
	全局方法的拥有者
	isNaN()  判断参数是否是非数字，返回的值布尔类型
	如果参数是特殊非数字值NaN,返回真
	注意：NaN： not a number
	parseInt()   返回字符串转换得到的整数
	parseFloat() 返回字符串转换得到的浮点数
3.数学对象
	封装了和数学相关的特性，包括一些常数和数学函数
	调用Math对象的方法
	math.[{属性(方法名)}]
		PI    返回圆周率
		abs   返回数字的绝对值
		sin   返回数的正弦
		min   返回给定数字中最小的值
		max   返回给定数字中最大的值
4.字符串对象
	封装了和字符串相关特性来处理字符串，对字符串进行剪切、拼接、合并，替换等等
	调用string对象方法或者属性
	string([val])
	val是可选项
5.数组对象
	js中最基本的数据类型，封装了和数组相关的属性和方法
	房间1     房间2     房间3    房间4
	周冬雨    刘亦菲    林志玲   范冰冰
	创建数组的方式
		a.通过new运算符调用array对象
			var a=new Array();
		b.通过构造函数传递元素为参数
			var a=new Array(10,20,30);
		c.直接将元素放入[]中，元素通过逗号分开
			var a=[1，2，3，4]
		d.创建指定数组(元素的个数)
			var a=new Array(4)
===========================================================
6.其他数据类型
	a.函数
		函数角色有2种，一种是数据类型，一种是程序设计
		定义函数的方式
		function typename(arg)
		{
			this.arg=arg;
		}
	b.空值
		之前所说的数据类型都有自己的内容，编程中还有一种：什么都没有(null)
		注意:= 代表赋值 ==代表比较 ===对象比较
	c.不确定数据类型
		undefined 表示一个变量什么都没得到，空值都没有
		在应用里面null和undefined作用一致

=============================================================
7.常量和变量
	a.常量
		从始至终不能被改变的数据
		常量的种类
		包括布尔类型，字符类型，数值类型
		"天儿不错" 字符常量
		077       数值常量
		true      布尔常量
	b.变量
		1>什么是变量
			变量是程序中可以发生改变的量，专业说法叫做内存单元
			可以理解为装东西的容器
		2>变量的定义方式
			var 变量名=值     定义变量
			变量名=值         赋值
			var 变量名        定义变量
			字符类型变量
				var str="hello"
			数值类型变量
				var b=10;
			布尔类型变量
				var t=false;
		3>变量的命名规则
			变量名必须以字母或者_或者$开头,后面可以跟数字和字符串，不能使用其他特殊符号
			js对标识符大小写敏感
		4.变量的作用域
			作用域。有效范围，js有全局和局部之分，变量名相同时候局部优先于全局作用域
8.运算符和表达式
	a.表达式
		产生结果的式子，表达式可以作为参数传递给函数或者将表达式赋值给变量
	b.操作数
		就是表达是中常量或者变量
		(a+b)/c+d
	c.运算符
		c1.算术运算符
			在表达式中计算作用，如果在数学中，运算符就是加减乘除
			+
			-
			*
			/
			%
			加法操作符操作数字返回的是数字的和，如果是字符串，返回的是拼接后的结果
	d.关系运算符
		比较两个操作数大于小于等于，返回的值是布尔类型
		1>相等运算符，判断两个数是否相等，如果相等，返回真，如果不等返回假
		2>等同运算符
			==并非严格意义上相等性判断，通过数据类型转换也可以返回真
			===严格意义上相等性判断，他们的值和数据类型完全一致才能返回真
		3>不等运算符
			使用！=返回一个布尔值判断两个操作数是否不相等，如果不相等返回真，否则返回假
		4>不等同运算符
			!==效果和等同运算符正好相反，严格不相等返回真
		5>比较运算符
			两个操作数的比较，只能返回真或者假
			>
			<
			=
			>=
			<=
			!=
		6.in运算符
			检查对象是否有指定属性，通常数组对象中存在元素索引集合，集合中每个元素都是非负数
		7.instance运算符
			返回一个布尔值，表明对象是否是某个类的实例
	e.逻辑运算符
		1.逻辑与
			操作符&&,属于双目运算符，操作数被当成布尔类型的常量
			&&用法
				操作数1 && 操作数2
		2.逻辑或
			操作符||，属于双目运算符，对两个操作数进行或运算，返回一个布尔值
		3>逻辑非
			操作符!属于单目运算符，对操作数逻辑值取反，操作数可以使变量或者常量
	f.其他运算符
		1>类型检测运算符
			js中没数据都有数据类型，可以通过typeof来进行检测
		2>条件运算符
			根据条件在两个语句中选择一个来执行(三目运算符)
			条件表达式?语句1：语句2
			满足条件执行语句1，不满足条件执行语句2
		3>void运算符
			有些地方不需要返回值，比如js代码写入到浏览器执行
		4>数组存取运算符
		5>delete运算符
			delete运算符可以删除对象一个属性或者数组的一个元素，js对象的属性可以动态添加，也可以通过delete删除
		6>this运算符
			准确说是一个关键字，面向对象中可以返回当前对象的引用
9.控制语句
	程序流程控制，分为循环和判断
	建议:流程图制作( visio processon )
	a.判断语句(条件判断)
		1>if语句
			if语句测试的是一个布尔类型表达式，如果为真则继续执行代码
			if ( 表达式 )   //条件判断语句
			{
				语句组;     //满足条件时候所执行的代码
			}
			注意:表达式一定要有，语句组是可选
			注意:if语句的花括号是成对出现，不能交叉嵌套
		2>if-else语句
			根据表达式的值，决定是否执行某个人物，没有其他选择(只有2种选择)
			if ( 表达式 )
			{
				语句组;
			}
			else
			{
				语句组;
			}
		3>if-else-if语句
			当有多个可供判断条件时候，单个if-else表达不完全使用if-else-if，而不是多个if-else实现
			if ( 表达式 )
			{
				语句组;
			}
			else if ( 表达式 )
			{
				语句组;
			}
			...
			else {
				语句组;
			}
			注意:表达式一定要有，语句组可以是一条或者多条语句组成
		4>switch语句
			使用if-else实现多路选择不容易维护可以使用switch-case语句，在给定选择中选择一个复合条件的分支来执行
			switch ( 表达式 )
			{
				case 标识1:
					语句组;
				case 标识2:
					语句组;
			}
	b.循环语句
		编程中有些代码需要执行多次，需要写入大量代码帮助计算机快速解决重复和繁琐的任务将重复的执行语句放在循环条件中运行
		1>for语句
			重复执行的语句使用for比较合适
			for (表达式1;表达式2;表达式3)
			{
				语句组;
			}
		2>for in 语句
			for ( 变量 in 集合 )
			{
				语句组;
			}
			注意:变量作为集合中的一个元素，当集合中元素个数为0时候，不执行循环体
		3>while循环
			当重复执行动作简单时候可以使用while代替for循环‘’
			while循环在执行循环体前会测试一个条件，如果条件成立，进入到循环体中
			while ( 条件表达式 )
			{
				语句组;
			}
			注意：条件表达式必选，无论发挥什么类数值都是作为布尔类型处理
		4>do...while语句
			while语句进入到循环体前测试表达式是否成立
			do..while是先执行一遍循环体，循环语句执行后再测试表达式，如果成立进入到循环体
		5>跳出循环
			再循环体重直接控制循环或者进行下一轮循环
				break 无条件跳出并且结束当前循环结构
				continue 忽略后面语句并且结束本轮循环进入到下一轮循环
				


